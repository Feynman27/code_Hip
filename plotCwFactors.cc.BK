#include <map>
#include <sstream>
#include <iostream>
#include "TFile.h"
#include "TGraphAsymmErrors.h"
#include "TCanvas.h"
#include "TString.h"
#include "TLegend.h"
#include "TLegendEntry.h"
#include "TLatex.h"
#include "TH1F.h"
#include "TStyle.h"

void plotCwFactors(){

    TFile* _file0 = TFile::Open("efficiencies.root");
    const int nPtBins = 1;
    const int nEtaBins = 11;
    const int nCentBins = 5;
    std::map<std::string,TGraphAsymmErrors*> graphs_pos_A, graphs_pos_B, graphs_neg_A, graphs_neg_B;
    std::map<std::string,TCanvas*> canvases;
    TCanvas* c = new TCanvas("canv_pos_A","#mu^{+},PeriodA",700,500);
    canvases.insert(std::make_pair<std::string,TCanvas*>("canv_pos_A",c) );
    c = new TCanvas("canv_pos_B","#mu^{+},PeriodB",700,500);
    canvases.insert(std::make_pair<std::string,TCanvas*>("canv_pos_B",c) );
    c = new TCanvas("canv_neg_A","#mu^{-},PeriodA",700,500);
    canvases.insert(std::make_pair<std::string,TCanvas*>("canv_neg_A",c) );
    c = new TCanvas("canv_neg_B","#mu^{-},PeriodB",700,500);
    canvases.insert(std::make_pair<std::string,TCanvas*>("canv_neg_B",c) );

    bool isEmptyPosA=true, isEmptyPosB=true, isEmptyNegA=true, isEmptyNegB=true;
    int marker[nCentBins] = {kRed, kBlue, kMagenta, kGreen, kOrange};
    int style[nCentBins] = {20,21,22,23,33};
    TString centrality[nCentBins] = {"0-5%","5-10%","10-20%","20-40%","40-90%"};
    TH1F *h = new TH1F("h","h",100,-3,3);
    h->GetYaxis()->SetRangeUser(0.0,1.1);
    h->GetXaxis()->SetTitle("#eta^{#mu}_{lab}");
    h->GetYaxis()->SetTitle("C_{W}");

    TGraphAsymmErrors *gr=NULL;
    TLegend *leg = new TLegend(0.6623563,0.2457627,0.9324713,0.4872881,NULL,"brNDC");
    for(int ipt=0; ipt<nPtBins; ++ipt){
        for(int icent=0; icent<nCentBins; ++icent){
            std::stringstream name_pos_A, name_pos_B, name_neg_A, name_neg_B;
            name_pos_A << "effPos_A_wtd_pt" << ipt << "_cent" << icent;
            gr = (TGraphAsymmErrors*)_file0->Get(name_pos_A.str().c_str());
            graphs_pos_A.insert(std::make_pair<std::string,TGraphAsymmErrors*>(name_pos_A.str(),gr) );
            name_neg_A << "effNeg_A_wtd_pt" << ipt << "_cent" << icent;
            gr = (TGraphAsymmErrors*)_file0->Get(name_neg_A.str().c_str());
            graphs_neg_A.insert(std::make_pair<std::string,TGraphAsymmErrors*>(name_neg_A.str(),gr) );
            name_pos_B << "effPos_B_wtd_pt" << ipt << "_cent" << icent;
            gr = (TGraphAsymmErrors*)_file0->Get(name_pos_B.str().c_str());
            graphs_pos_B.insert(std::make_pair<std::string,TGraphAsymmErrors*>(name_pos_B.str(),gr) );
            name_neg_B << "effNeg_B_wtd_pt" << ipt << "_cent" << icent;
            gr = (TGraphAsymmErrors*)_file0->Get(name_neg_B.str().c_str());
            graphs_neg_B.insert(std::make_pair<std::string,TGraphAsymmErrors*>(name_neg_B.str(),gr) );

            canvases["canv_pos_A"]->cd();
            if(isEmptyPosA) {
                graphs_pos_A[name_pos_A.str()]->SetMarkerColor(marker[icent]);
                graphs_pos_A[name_pos_A.str()]->SetLineColor(marker[icent]);
                graphs_pos_A[name_pos_A.str()]->SetMarkerStyle(style[icent]);
                h->Draw();
                graphs_pos_A[name_pos_A.str()]->Draw("pesame");
                TLatex *   tex = new TLatex(0.3461371,0.8628191,"Period A");
                tex->SetNDC();
                tex->SetTextFont(42);
                tex->SetLineWidth(2);
                tex->Draw();
                tex = new TLatex(0.1933654,0.8628191,"W^{+}#rightarrow#mu^{+}");
                tex->SetNDC();
                tex->SetTextFont(42);
                tex->SetLineWidth(2);
                tex->Draw();

                leg->SetTextFont(gStyle->GetTextFont());
                leg->SetTextSize(gStyle->GetTextSize());
                leg->SetBorderSize(0);
                leg->SetFillColor(0);
                leg->AddEntry(graphs_pos_A[name_pos_A.str()],centrality[icent],"pl");

                isEmptyPosA = false;
            }
            else { 
                graphs_pos_A[name_pos_A.str()]->SetMarkerColor(marker[icent]);
                graphs_pos_A[name_pos_A.str()]->SetLineColor(marker[icent]);
                graphs_pos_A[name_pos_A.str()]->SetMarkerStyle(style[icent]);
                graphs_pos_A[name_pos_A.str()]->Draw("pesame");
                leg->AddEntry(graphs_pos_A[name_pos_A.str()],centrality[icent],"pl");
            }
            leg->Draw();

            canvases["canv_pos_B"]->cd();
            if(isEmptyPosB) { 
                graphs_pos_B[name_pos_B.str()]->SetMarkerColor(marker[icent]);
                graphs_pos_B[name_pos_B.str()]->SetLineColor(marker[icent]);
                graphs_pos_B[name_pos_B.str()]->SetMarkerStyle(style[icent]);
                h->Draw();
                graphs_pos_B[name_pos_B.str()]->Draw("pesame");
                TLatex *   tex = new TLatex(0.3461371,0.8628191,"Period B");
                tex->SetNDC();
                tex->SetTextFont(42);
                tex->SetLineWidth(2);
                tex->Draw();
                tex = new TLatex(0.1933654,0.8628191,"W^{+}#rightarrow#mu^{+}");
                tex->SetNDC();
                tex->SetTextFont(42);
                tex->SetLineWidth(2);
                tex->Draw();
                isEmptyPosB=false;
            }
            else {
                graphs_pos_B[name_pos_B.str()]->SetMarkerColor(marker[icent]);
                graphs_pos_B[name_pos_B.str()]->SetLineColor(marker[icent]);
                graphs_pos_B[name_pos_B.str()]->SetMarkerStyle(style[icent]);
                graphs_pos_B[name_pos_B.str()]->Draw("pesame");
            
            }
            leg->Draw();
            canvases["canv_neg_A"]->cd();
            if(isEmptyNegA){
                graphs_neg_A[name_neg_A.str()]->SetMarkerColor(marker[icent]);
                graphs_neg_A[name_neg_A.str()]->SetLineColor(marker[icent]);
                graphs_neg_A[name_neg_A.str()]->SetMarkerStyle(style[icent]);
                h->Draw();
                graphs_neg_A[name_neg_A.str()]->Draw("pesame");
                TLatex *   tex = new TLatex(0.3461371,0.8628191,"Period A");
                tex->SetNDC();
                tex->SetTextFont(42);
                tex->SetLineWidth(2);
                tex->Draw();
                tex = new TLatex(0.1933654,0.8628191,"W^{-}#rightarrow#mu^{-}");
                tex->SetNDC();
                tex->SetTextFont(42);
                tex->SetLineWidth(2);
                tex->Draw();
                isEmptyNegA=false;
            }
            else {
                graphs_neg_A[name_neg_A.str()]->SetMarkerColor(marker[icent]);
                graphs_neg_A[name_neg_A.str()]->SetLineColor(marker[icent]);
                graphs_neg_A[name_neg_A.str()]->SetMarkerStyle(style[icent]);
                graphs_neg_A[name_neg_A.str()]->Draw("pesame");
            }
            leg->Draw();
            canvases["canv_neg_B"]->cd();
            if(isEmptyNegB){
                graphs_neg_B[name_neg_B.str()]->SetMarkerColor(marker[icent]);
                graphs_neg_B[name_neg_B.str()]->SetLineColor(marker[icent]);
                graphs_neg_B[name_neg_B.str()]->SetMarkerStyle(style[icent]);
                h->Draw();
                graphs_neg_B[name_neg_B.str()]->Draw("pesame");
                TLatex *   tex = new TLatex(0.3461371,0.8628191,"Period B");
                tex->SetNDC();
                tex->SetTextFont(42);
                tex->SetLineWidth(2);
                tex->Draw();
                tex = new TLatex(0.1933654,0.8628191,"W^{-}#rightarrow#mu^{-}");
                tex->SetNDC();
                tex->SetTextFont(42);
                tex->SetLineWidth(2);
                tex->Draw();
                isEmptyNegB=false;
            }
            else {
                graphs_neg_B[name_neg_B.str()]->SetMarkerColor(marker[icent]);
                graphs_neg_B[name_neg_B.str()]->SetLineColor(marker[icent]);
                graphs_neg_B[name_neg_B.str()]->SetMarkerStyle(style[icent]);
                graphs_neg_B[name_neg_B.str()]->Draw("pesame");
            }
            leg->Draw();
        }//icent
    }//ipt

    std::map<std::string,TCanvas*>::iterator it;
    for(it=canvases.begin(); it!=canvases.end(); ++it){

        std::string saveDir = "plots/";
        saveDir+=it->first; saveDir+=".C";
        it->second->Print(saveDir.c_str());
    }
}
